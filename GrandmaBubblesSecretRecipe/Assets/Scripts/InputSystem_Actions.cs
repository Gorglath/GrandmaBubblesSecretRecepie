//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/InputSystem_Actions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputSystem_Actions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputSystem_Actions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputSystem_Actions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""85c4a817-eac2-4305-a042-f8bfef3ee184"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a9f54b0f-ecf6-4191-8e94-538f5d5f042a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""InputAction"",
                    ""type"": ""Button"",
                    ""id"": ""14d78eb8-7d1a-478b-b198-8c2bab439678"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KillSelf"",
                    ""type"": ""Button"",
                    ""id"": ""3af5d74e-f4fd-4f93-8607-03a3d46f93af"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba636221-dda9-453b-9597-75a3f4ec168b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5f4cc849-7063-4734-bdbb-1f8714dd8b03"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Gamepad"",
                    ""action"": ""InputAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de96a9a4-d92b-4907-b97f-8a7aeeddf768"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KillSelf"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MenuPlayer"",
            ""id"": ""0f280892-a7a8-459c-92d2-7598a6191637"",
            ""actions"": [
                {
                    ""name"": ""StartGame"",
                    ""type"": ""Button"",
                    ""id"": ""bc90074a-7ca3-4e30-96aa-a45deba2965b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Bubble"",
                    ""type"": ""Button"",
                    ""id"": ""29428d91-bb1e-44a9-8bbe-85bbfcc778fe"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""aff4f26f-8f6c-4332-88aa-c32b69ad5ec8"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""StartGame"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b806f978-65ec-4dd7-bcae-e75a8f0f078f"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bubble"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_InputAction = m_Player.FindAction("InputAction", throwIfNotFound: true);
        m_Player_KillSelf = m_Player.FindAction("KillSelf", throwIfNotFound: true);
        // MenuPlayer
        m_MenuPlayer = asset.FindActionMap("MenuPlayer", throwIfNotFound: true);
        m_MenuPlayer_StartGame = m_MenuPlayer.FindAction("StartGame", throwIfNotFound: true);
        m_MenuPlayer_Bubble = m_MenuPlayer.FindAction("Bubble", throwIfNotFound: true);
    }

    ~@InputSystem_Actions()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputSystem_Actions.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_MenuPlayer.enabled, "This will cause a leak and performance issues, InputSystem_Actions.MenuPlayer.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_InputAction;
    private readonly InputAction m_Player_KillSelf;
    public struct PlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public PlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @InputAction => m_Wrapper.m_Player_InputAction;
        public InputAction @KillSelf => m_Wrapper.m_Player_KillSelf;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @InputAction.started += instance.OnInputAction;
            @InputAction.performed += instance.OnInputAction;
            @InputAction.canceled += instance.OnInputAction;
            @KillSelf.started += instance.OnKillSelf;
            @KillSelf.performed += instance.OnKillSelf;
            @KillSelf.canceled += instance.OnKillSelf;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @InputAction.started -= instance.OnInputAction;
            @InputAction.performed -= instance.OnInputAction;
            @InputAction.canceled -= instance.OnInputAction;
            @KillSelf.started -= instance.OnKillSelf;
            @KillSelf.performed -= instance.OnKillSelf;
            @KillSelf.canceled -= instance.OnKillSelf;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // MenuPlayer
    private readonly InputActionMap m_MenuPlayer;
    private List<IMenuPlayerActions> m_MenuPlayerActionsCallbackInterfaces = new List<IMenuPlayerActions>();
    private readonly InputAction m_MenuPlayer_StartGame;
    private readonly InputAction m_MenuPlayer_Bubble;
    public struct MenuPlayerActions
    {
        private @InputSystem_Actions m_Wrapper;
        public MenuPlayerActions(@InputSystem_Actions wrapper) { m_Wrapper = wrapper; }
        public InputAction @StartGame => m_Wrapper.m_MenuPlayer_StartGame;
        public InputAction @Bubble => m_Wrapper.m_MenuPlayer_Bubble;
        public InputActionMap Get() { return m_Wrapper.m_MenuPlayer; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MenuPlayerActions set) { return set.Get(); }
        public void AddCallbacks(IMenuPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_MenuPlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MenuPlayerActionsCallbackInterfaces.Add(instance);
            @StartGame.started += instance.OnStartGame;
            @StartGame.performed += instance.OnStartGame;
            @StartGame.canceled += instance.OnStartGame;
            @Bubble.started += instance.OnBubble;
            @Bubble.performed += instance.OnBubble;
            @Bubble.canceled += instance.OnBubble;
        }

        private void UnregisterCallbacks(IMenuPlayerActions instance)
        {
            @StartGame.started -= instance.OnStartGame;
            @StartGame.performed -= instance.OnStartGame;
            @StartGame.canceled -= instance.OnStartGame;
            @Bubble.started -= instance.OnBubble;
            @Bubble.performed -= instance.OnBubble;
            @Bubble.canceled -= instance.OnBubble;
        }

        public void RemoveCallbacks(IMenuPlayerActions instance)
        {
            if (m_Wrapper.m_MenuPlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMenuPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_MenuPlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MenuPlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MenuPlayerActions @MenuPlayer => new MenuPlayerActions(this);
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnInputAction(InputAction.CallbackContext context);
        void OnKillSelf(InputAction.CallbackContext context);
    }
    public interface IMenuPlayerActions
    {
        void OnStartGame(InputAction.CallbackContext context);
        void OnBubble(InputAction.CallbackContext context);
    }
}
